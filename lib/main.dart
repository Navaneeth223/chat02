import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'dart:async';
import 'dart:io'; // Required for File class in _sendMediaMessage

// --- Firebase Imports ---
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_storage/firebase_storage.dart';
// Import the firebase_options.dart file generated by flutterfire configure
// Make sure you have run 'flutterfire configure' in your project
// import 'firebase_options.dart';


// --- External Package Imports ---
// You will need to add these packages to your pubspec.yaml and run 'flutter pub get'
// camera: ^0.10.0+1
// image_picker: ^1.0.0 # Use the latest version
// file_picker: ^6.0.0 # Use the latest version
// permission_handler: ^11.0.0 # Use the latest version
// emoji_picker_flutter: ^2.0.0 # Use the latest version
// cached_network_image: ^3.0.0 # Good for caching network images - uncomment usage in _buildMessageContent
// lottie: ^2.0.0 # For Lottie animations (optional, for animated background)


// --- Main Function ---
void main() async {
  WidgetsFlutterBinding.ensureInitialized(); // Required for async operations before runApp

  // --- Firebase Initialization ---
  WidgetsFlutterBinding.ensureInitialized();

  if (kIsWeb) {
    await Firebase.initializeApp(options: FirebaseOptions(apiKey: "AIzaSyDtnq8-2h-m07HeGaJ6Zw8891s9RGAmyXc", appId: "1:100385303708:web:056e70cf0ea2d6096bd159", messagingSenderId: "100385303708", projectId: "chat02-e7cd8"));

  }
  else {
    await Firebase.initializeApp();
  }
    // Uncomment this section after running 'flutterfire configure'
  // try {
  //   await Firebase.initializeApp(
  //     options: DefaultFirebaseOptions.currentPlatform,
  //   );
  //   print("Firebase initialized successfully.");
  // } catch (e) {
  //   print("Error initializing Firebase: $e");
  //   // You might want to show an error dialog or handle this gracefully
  // }

  runApp(MyApp());
}


// --- Splash Screen Widget ---
class SplashScreen extends StatefulWidget {
  @override
  _SplashScreenState createState() => _SplashScreenState();
}

class _SplashScreenState extends State<SplashScreen> with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<double> _opacityAnimation;

  @override
  void initState() {
    super.initState();

    _controller = AnimationController(
      duration: const Duration(seconds: 2),
      vsync: this,
    );

    _opacityAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(
        parent: _controller,
        curve: Curves.easeIn,
      ),
    );

    _controller.forward();

    // Navigate after a delay
    Timer(Duration(seconds: 3), () {
      // --- Firebase Auth State Check ---
      // Uncomment this section after setting up Firebase Auth
      // FirebaseAuth.instance.authStateChanges().listen((User? user) {
      //   if (user == null) {
      //     // User is not logged in, navigate to AuthScreen
      //     Navigator.of(context).pushReplacement(
      //       MaterialPageRoute(builder: (context) => AuthScreen()),
      //     );
      //   } else {
      //     // User is logged in, navigate to ChatScreen
      //     Navigator.of(context).pushReplacement(
      //       MaterialPageRoute(builder: (context) => ChatScreen()),
      //     );
      //   }
      // });

      // --- Placeholder Navigation (Remove after Firebase Auth is set up) ---
      Navigator.of(context).pushReplacement(
        MaterialPageRoute(builder: (context) => AuthScreen()),
      );
    });
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.pink[50], // Cute background color
      body: Center(
        child: FadeTransition(
          opacity: _opacityAnimation,
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              // Your App Logo - Add your logo image to assets and update the path
              // Remember to declare assets in pubspec.yaml
              Image.asset(
                'assets/app_logo.png', // Placeholder: Replace with your logo asset path
                width: 150,
                height: 150,
              ),
              SizedBox(height: 20),
              Text(
                'Your App Name', // Replace with your app name
                style: TextStyle(
                  fontSize: 24,
                  fontWeight: FontWeight.bold,
                  color: Colors.pink[900],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}


// --- Authentication Screen Widget ---
class AuthScreen extends StatefulWidget {
  @override
  _AuthScreenState createState() => _AuthScreenState();
}

class _AuthScreenState extends State<AuthScreen> {
  final _formKey = GlobalKey<FormState>();
  final TextEditingController _emailController = TextEditingController();
  final TextEditingController _passwordController = TextEditingController();
  bool _isLoading = false;

  // Function to handle user login using Firebase Auth
  void _login() async {
    if (_formKey.currentState!.validate()) {
      setState(() { _isLoading = true; });
      try {
        await FirebaseAuth.instance.signInWithEmailAndPassword(
          email: _emailController.text.trim(),
          password: _passwordController.text.trim(),
        );
        // Navigate to ChatScreen on successful login
        Navigator.of(context).pushReplacement(
          MaterialPageRoute(builder: (context) => ChatScreen()),
        );
      } on FirebaseAuthException catch (e) {
        // Handle login errors
        String message = 'An error occurred, please check your credentials.';
        if (e.code == 'user-not-found') {
          message = 'No user found for that email.';
        } else if (e.code == 'wrong-password') {
          message = 'Wrong password provided for that user.';
        }
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text(message)),
        );
      } catch (e) {
        print('Login error: $e');
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('An unexpected error occurred.')),
        );
      }
      finally {
        setState(() { _isLoading = false; });
      }
    }
  }

  // Function to handle user signup using Firebase Auth
  void _signup() async {
    if (_formKey.currentState!.validate()) {
      setState(() { _isLoading = true; });
      try {
        // Create user with email and password
        UserCredential userCredential = await FirebaseAuth.instance.createUserWithEmailAndPassword(
          email: _emailController.text.trim(),
          password: _passwordController.text.trim(),
        );
        // TODO: Optionally, add user details to Firestore (e.g., a 'users' collection)
        // await FirebaseFirestore.instance.collection('users').doc(userCredential.user!.uid).set({
        //   'email': userCredential.user!.email,
        //   'createdAt': FieldValue.serverTimestamp(),
        //   // Add other user details like display name, avatar URL here
        // });

        // Navigate to ChatScreen on successful signup
        Navigator.of(context).pushReplacement(
          MaterialPageRoute(builder: (context) => ChatScreen()),
        );
      } on FirebaseAuthException catch (e) {
        // Handle signup errors
        String message = 'An error occurred, please try again.';
        if (e.code == 'weak-password') {
          message = 'The password provided is too weak.';
        } else if (e.code == 'email-already-in-use') {
          message = 'An account already exists for that email.';
        }
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text(message)),
        );
      } catch (e) {
        print('Signup error: $e');
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('An unexpected error occurred.')),
        );
      }
      finally {
        setState(() { _isLoading = false; });
      }
    }
  }

  @override
  void dispose() {
    _emailController.dispose();
    _passwordController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Authenticate')),
      body: Center(
        child: SingleChildScrollView( // Added SingleChildScrollView to prevent overflow
          child: Padding(
            padding: const EdgeInsets.all(16.0),
            child: Form( // Wrapped with Form for validation
              key: _formKey,
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  // Email TextField
                  TextFormField(
                    controller: _emailController,
                    decoration: InputDecoration(labelText: 'Email'),
                    keyboardType: TextInputType.emailAddress,
                    validator: (value) {
                      if (value == null || value.isEmpty || !value.contains('@')) {
                        return 'Please enter a valid email address.';
                      }
                      return null;
                    },
                  ),
                  SizedBox(height: 12),
                  // Password TextField
                  TextFormField(
                    controller: _passwordController,
                    decoration: InputDecoration(labelText: 'Password'),
                    obscureText: true,
                    validator: (value) {
                      if (value == null || value.isEmpty || value.length < 6) {
                        return 'Password must be at least 6 characters long.';
                      }
                      return null;
                    },
                  ),
                  SizedBox(height: 24),
                  if (_isLoading) // Show loading indicator when loading
                    CircularProgressIndicator(),
                  if (!_isLoading) // Show buttons when not loading
                    Column(
                      children: [
                        ElevatedButton(
                          onPressed: _login, // Call login function
                          child: Text('Login'),
                        ),
                        TextButton(
                          onPressed: _signup, // Call signup function
                          child: Text('Sign Up'),
                        ),
                      ],
                    ),
                  // TODO: Add options for social login (Google, Facebook, etc.)
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }
}


// --- Theme Mode Enum ---
enum AppThemeMode {
  girlish,
  manly,
}

// --- Represents a message in the chat ---
class ChatMessage {
  final String id; // Message ID from Firestore
  final String text;
  final String senderId; // Sender's User ID from Firebase Auth
  final String senderName; // Sender's display name
  final String senderAvatarUrl; // URL for the sender's avatar
  final MessageType type; // Type of message (text, image, file, etc.)
  final String? mediaUrl; // URL for image/file if type is not text
  final Timestamp timestamp; // Timestamp from Firestore

  ChatMessage({
    required this.id,
    required this.text,
    required this.senderId,
    required this.senderName,
    required this.senderAvatarUrl,
    this.type = MessageType.text,
    this.mediaUrl,
    required this.timestamp,
  });

  // Factory constructor to create ChatMessage from Firestore DocumentSnapshot
  factory ChatMessage.fromDocument(DocumentSnapshot doc) {
    final data = doc.data() as Map<String, dynamic>;
    return ChatMessage(
      id: doc.id,
      text: data['text'] ?? '',
      senderId: data['senderId'] ?? '',
      senderName: data['senderName'] ?? 'Unknown', // Default name if not available
      senderAvatarUrl: data['senderAvatarUrl'] ?? '', // Default avatar if not available
      type: MessageType.values.firstWhere(
            (e) => e.toString().split('.').last == data['type'],
        orElse: () => MessageType.text, // Default to text if type is unknown
      ),
      mediaUrl: data['mediaUrl'],
      timestamp: data['timestamp'] ?? Timestamp.now(), // Default to now if no timestamp
    );
  }
}

// --- Enum to define message types ---
enum MessageType {
  text,
  image,
  file,
  // Add other types like video, audio if needed
}

// --- The main application widget ---
class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Advanced Chat App UI',
      theme: ThemeData(
        primarySwatch: Colors.blue, // Default theme, will be overridden by ChatScreen's Theme widget
        visualDensity: VisualDensity.adaptivePlatformDensity,
      ),
      // Start with the SplashScreen, which will handle navigation based on auth state
      home: SplashScreen(),
    );
  }
}


// --- The chat screen widget ---
class ChatScreen extends StatefulWidget {
  @override
  _ChatScreenState createState() => _ChatScreenState();
}

class _ChatScreenState extends State<ChatScreen> {
  // Controller for the text input field
  final TextEditingController _textController = TextEditingController();
  // List to hold messages (will be populated from Firestore)
  final List<ChatMessage> _messages = [];
  // Flag to show/hide emoji picker
  bool _showEmojiPicker = false;
  // Current theme mode
  AppThemeMode _currentThemeMode = AppThemeMode.girlish; // Default to Girlish

  // Get the currently authenticated user
  final User? currentUser = FirebaseAuth.instance.currentUser;

  // Placeholder for the chat room ID (in a real app, this would be dynamic,
  // representing a conversation between specific users)
  final String chatId = 'your_chat_room_id'; // TODO: Replace with actual chat room ID logic

  // Stream subscription to listen for Firestore changes
  StreamSubscription? _messageSubscription;

  @override
  void initState() {
    super.initState();
    // Start listening for messages from Firestore when the widget is created
    _listenForMessages();
  }

  // Function to listen for new messages from Firestore
  void _listenForMessages() {
    if (currentUser == null) {
      // Cannot listen for messages if user is not logged in
      print('User not logged in, cannot listen for messages.');
      // You might want to navigate back to the AuthScreen here
      return;
    }

    // Set up the Firestore stream subscription
    _messageSubscription = FirebaseFirestore.instance
        .collection('chats')
        .doc(chatId) // Use the chat room ID
        .collection('messages')
        .orderBy('timestamp', descending: true) // Order by timestamp to show latest first
        .snapshots() // Listen for real-time updates
        .listen((snapshot) {
      // Process the changes in the snapshot
      // This approach handles initial data load and subsequent changes
      final List<ChatMessage> fetchedMessages = snapshot.docs
          .map((doc) => ChatMessage.fromDocument(doc))
          .toList();

      setState(() {
        _messages.clear(); // Clear existing messages
        _messages.addAll(fetchedMessages); // Add fetched messages
      });

    }, onError: (error) {
      print('Error listening for messages: $error');
      // TODO: Show an error message to the user
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error loading messages.')),
      );
    });
  }


  // Function to toggle the theme mode
  void _toggleThemeMode() {
    setState(() {
      _currentThemeMode = _currentThemeMode == AppThemeMode.girlish
          ? AppThemeMode.manly
          : AppThemeMode.girlish;
    });
  }

  // Define ThemeData for Girlish Mode
  ThemeData _girlishTheme() {
    return ThemeData(
      primarySwatch: Colors.pink, // Pink primary color
      scaffoldBackgroundColor: Colors.pink[50], // Light pink background
      cardColor: Colors.white, // White card color for message bubbles etc.
      appBarTheme: AppBarTheme(
        backgroundColor: Colors.pinkAccent, // Pink accent app bar
        foregroundColor: Colors.white, // White text/icons in app bar
      ),
      textTheme: TextTheme(
        bodyMedium: TextStyle(color: Colors.black87), // Default text color
        bodySmall: TextStyle(color: Colors.pink[700]), // Caption text color
        titleMedium: TextStyle(color: Colors.pink[900]), // Sender name color
      ),
      iconTheme: IconThemeData(
        color: Colors.pinkAccent, // Pink icons
      ),
      inputDecorationTheme: InputDecorationTheme(
        hintStyle: TextStyle(color: Colors.pink[300]), // Lighter pink hint text
      ),
      // Add more theme properties for a complete girlish look (fonts, shapes, etc.)
      // For example:
      // fontFamily: 'CuteFont', // You would need to add a custom font
      // buttonTheme: ButtonThemeData(shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(20))),
    );
  }

  // Define ThemeData for Manly Mode
  ThemeData _manlyTheme() {
    return ThemeData(
      primarySwatch: Colors.blueGrey, // BlueGrey primary color
      scaffoldBackgroundColor: Colors.blueGrey[50], // Light blueGrey background
      cardColor: Colors.white, // White card color
      appBarTheme: AppBarTheme(
        backgroundColor: Colors.blueGrey[700], // Dark blueGrey app bar
        foregroundColor: Colors.white, // White text/icons
      ),
      textTheme: TextTheme(
        bodyMedium: TextStyle(color: Colors.black87), // Default text color
        bodySmall: TextStyle(color: Colors.blueGrey[600]), // Caption text color
        titleMedium: TextStyle(color: Colors.blueGrey[900]), // Sender name color
      ),
      iconTheme: IconThemeData(
        color: Colors.blueGrey[700], // Dark blueGrey icons
      ),
      inputDecorationTheme: InputDecorationTheme(
        hintStyle: TextStyle(color: Colors.blueGrey[400]), // Lighter blueGrey hint text
      ),
      // Add more theme properties for a complete manly look (fonts, shapes, etc.)
      // For example:
      // fontFamily: 'BoldFont', // You would need to add a custom font
      // buttonTheme: ButtonThemeData(shape: BeveledRectangleBorder()),
    );
  }

  // Get the current theme data based on the selected mode
  ThemeData _currentThemeData() {
    return _currentThemeMode == AppThemeMode.girlish
        ? _girlishTheme()
        : _manlyTheme();
  }


  // Function to handle sending a text message to Firestore
  void _handleSubmitted(String text) async {
    if (text.isEmpty || currentUser == null) return;

    _textController.clear();

    try {
      // Add message to Firestore
      await FirebaseFirestore.instance
          .collection('chats')
          .doc(chatId) // Use the chat room ID
          .collection('messages')
          .add({
        'text': text,
        'senderId': currentUser!.uid, // Use current user's ID
        'senderName': currentUser!.displayName ?? 'Anonymous', // Use user's display name or a default
        'senderAvatarUrl': currentUser!.photoURL ?? '', // Use user's photo URL or a default
        'type': MessageType.text.toString().split('.').last, // Store message type as string
        'timestamp': FieldValue.serverTimestamp(), // Use server timestamp
      });
      print('Text message sent to Firestore');
    } catch (e) {
      print('Error sending text message: $e');
      // TODO: Show an error message to the user
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Failed to send message.')),
      );
    }
  }

  // Placeholder function for opening the camera
  void _openCamera() async {
    // TODO: Implement camera access and capture logic using 'camera' package
    // You'll need to request permissions first using 'permission_handler'
    print('Opening camera...');
    // Example: Capture photo and send as image message
    // final picker = ImagePicker();
    // final XFile? photo = await picker.pickImage(source: ImageSource.camera);
    // if (photo != null) {
    //   _sendMediaMessage(photo.path, MessageType.image);
    // }
  }

  // Placeholder function for picking a file
  void _pickFile() async {
    // TODO: Implement file picking logic using 'file_picker' package
    print('Picking file...');
    // Example: Pick any file and send as file message
    // FilePickerResult? result = await FilePicker.platform.pickFiles();
    // if (result != null) {
    //   PlatformFile file = result.files.first;
    //   _sendMediaMessage(file.path!, MessageType.file);
    // }
  }

  // Function for sending a media message (image or file) to Firebase Storage and Firestore
  void _sendMediaMessage(String filePath, MessageType type) async {
    if (currentUser == null) return;

    try {
      // 1. Upload file to Firebase Storage
      final fileName = DateTime.now().millisecondsSinceEpoch.toString() + '.' + filePath.split('.').last;
      final storageRef = FirebaseStorage.instance.ref().child('chat_media').child(currentUser!.uid).child(fileName); // Organize by user ID
      final uploadTask = storageRef.putFile(File(filePath)); // Requires dart:io

      // Show upload progress (optional)
      uploadTask.snapshotEvents.listen((TaskSnapshot snapshot) {
        print('Upload progress: ${snapshot.bytesTransferred}/${snapshot.totalBytes}');
        // TODO: Update UI with progress indicator
      });


      // Wait for the upload to complete and get the download URL
      final TaskSnapshot snapshot = await uploadTask;
      final mediaUrl = await snapshot.ref.getDownloadURL();

      // 2. Send message with media URL to Firestore
      await FirebaseFirestore.instance
          .collection('chats')
          .doc(chatId) // Use the chat room ID
          .collection('messages')
          .add({
        'text': type == MessageType.image ? 'Image' : 'File', // Optional caption or file name
        'senderId': currentUser!.uid,
        'senderName': currentUser!.displayName ?? 'Anonymous',
        'senderAvatarUrl': currentUser!.photoURL ?? '',
        'type': type.toString().split('.').last,
        'mediaUrl': mediaUrl, // Include the download URL
        'timestamp': FieldValue.serverTimestamp(),
      });
      print('${type == MessageType.image ? 'Image' : 'File'} message sent to Firestore');

    } catch (e) {
      print('Error sending media message: $e');
      // TODO: Show an error message to the user
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Failed to send media message.')),
      );
    }
  }

  // Placeholder function for applying filters (would be part of image processing)
  void _applyFilter(String filterName) {
    // TODO: Implement image filtering logic
    print('Applying filter: $filterName');
    // This would typically happen on a preview screen before sending the image
  }

  // Function to toggle the emoji picker visibility
  void _toggleEmojiPicker() {
    setState(() {
      _showEmojiPicker = !_showEmojiPicker;
    });
    // TODO: Integrate a real emoji picker package here
  }

  // Build the UI for the input field and action buttons
  Widget _buildTextComposer() {
    // Get theme data based on current mode
    final currentTheme = _currentThemeData();

    return Container(
      margin: EdgeInsets.symmetric(horizontal: 8.0, vertical: 8.0), // Added vertical margin
      padding: EdgeInsets.symmetric(horizontal: 8.0),
      decoration: BoxDecoration(
        color: currentTheme.cardColor, // Use theme card color
        borderRadius: BorderRadius.circular(25.0),
        boxShadow: [ // Added a subtle shadow
          BoxShadow(
            color: Colors.grey.withOpacity(0.2),
            spreadRadius: 1, // Use spreadRadius instead of spreadFactor
            blurRadius: 5,
            offset: Offset(0, 3), // changes position of shadow
          ),
        ],
      ),
      child: Row(
        children: <Widget>[
          // Camera button
          IconButton(
            icon: Icon(Icons.camera_alt, color: currentTheme.iconTheme.color), // Use theme icon color
            onPressed: _openCamera,
            tooltip: 'Open Camera',
          ),
          // File attachment button
          IconButton(
            icon: Icon(Icons.attach_file, color: currentTheme.iconTheme.color), // Use theme icon color
            onPressed: _pickFile,
            tooltip: 'Attach File',
          ),
          // Emoji button
          IconButton(
            icon: Icon(Icons.emoji_emotions, color: currentTheme.iconTheme.color), // Use theme icon color
            onPressed: _toggleEmojiPicker,
            tooltip: 'Insert Emoji',
          ),
          // Flexible allows the TextField to take up available space
          Flexible(
            child: TextField(
              controller: _textController,
              // Call _handleSubmitted when the user presses Enter/Done
              onSubmitted: _handleSubmitted,
              decoration: InputDecoration.collapsed(
                hintText: 'Send a message...',
                hintStyle: currentTheme.inputDecorationTheme.hintStyle, // Use theme hint style
              ),
              textCapitalization: TextCapitalization.sentences, // Capitalize first letter of sentences
              style: TextStyle(color: currentTheme.textTheme.bodyMedium?.color), // Use bodyMedium
            ),
          ),
          // Send button
          Container(
            margin: EdgeInsets.symmetric(horizontal: 4.0),
            decoration: BoxDecoration( // Circle background for send button
              color: currentTheme.primaryColor, // Use theme primary color
              shape: BoxShape.circle,
            ),
            child: IconButton(
              icon: Icon(Icons.send, color: Colors.white), // White icon for contrast
              // Call _handleSubmitted when the button is pressed
              onPressed: () => _handleSubmitted(_textController.text),
            ),
          ),
        ],
      ),
    );
  }

  // Build the UI for displaying individual messages
  Widget _buildMessage(ChatMessage message) {
    // Get theme data based on current mode
    final currentTheme = _currentThemeData();
    // Align messages based on sender
    final bool isCurrentUser = currentUser != null && message.senderId == currentUser!.uid; // Check if message is from current user

    // Define message bubble colors based on theme and sender
    Color messageBubbleColor = isCurrentUser
        ? currentTheme.primaryColor // Current user's bubble color
        : currentTheme.cardColor; // Other users' bubble color

    // Define text color based on bubble color for contrast
    Color messageTextColor = isCurrentUser
        ? Colors.white // White text for current user's primary colored bubble
        : Colors.black87; // Dark text for other users' light bubble

    // Define caption text color
    Color captionTextColor = isCurrentUser
        ? Colors.white70 // Lighter white for current user's caption
        : Colors.black54; // Lighter black for other users' caption


    return Container(
      margin: EdgeInsets.symmetric(vertical: 10.0),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        mainAxisAlignment: isCurrentUser ? MainAxisAlignment.end : MainAxisAlignment.start, // Align right for current user
        children: <Widget>[
          // Sender Avatar (only for others)
          if (!isCurrentUser)
            Container(
              margin: EdgeInsets.only(right: 8.0), // Reduced margin
              child: CircleAvatar(
                backgroundImage: message.senderAvatarUrl.isNotEmpty
                    ? NetworkImage(message.senderAvatarUrl)
                    : null, // Load avatar image if URL exists
                child: message.senderAvatarUrl.isEmpty
                    ? Text(message.senderName.isNotEmpty ? message.senderName[0].toUpperCase() : '?', // Fallback text if no avatar
                    style: TextStyle(color: Colors.white))
                    : null,
                backgroundColor: currentTheme.primaryColor.withOpacity(0.5), // Placeholder background color
              ),
            ),
          // Message content
          Flexible( // Use Flexible to prevent overflow
            child: Column(
              crossAxisAlignment: isCurrentUser ? CrossAxisAlignment.end : CrossAxisAlignment.start, // Align text right for current user
              children: <Widget>[
                // Sender Name (only for others)
                if (!isCurrentUser)
                  Padding(
                    padding: const EdgeInsets.only(bottom: 4.0), // Added padding
                    child: Text(message.senderName, style: currentTheme.textTheme.bodySmall), // Use bodySmall for caption style
                  ),
                // Message Bubble
                Container(
                  padding: EdgeInsets.all(10.0),
                  decoration: BoxDecoration(
                    color: messageBubbleColor, // Use calculated bubble color
                    borderRadius: BorderRadius.only(
                      topLeft: Radius.circular(isCurrentUser ? 15.0 : 0.0),
                      topRight: Radius.circular(isCurrentUser ? 0.0 : 15.0),
                      bottomLeft: Radius.circular(15.0),
                      bottomRight: Radius.circular(15.0),
                    ),
                  ),
                  child: _buildMessageContent(message, isCurrentUser, messageTextColor, captionTextColor), // Build content based on message type and colors
                ),
                // Timestamp (optional)
                Padding(
                  padding: const EdgeInsets.only(top: 4.0, left: 8.0, right: 8.0),
                  child: Text(
                    // Format the timestamp as needed
                    '${message.timestamp.toDate().hour}:${message.timestamp.toDate().minute}',
                    style: TextStyle(fontSize: 10.0, color: captionTextColor), // Use captionTextColor
                  ),
                ),
              ],
            ),
          ),
          // Sender Avatar (only for current user)
          if (isCurrentUser)
            Container(
              margin: EdgeInsets.only(left: 8.0), // Reduced margin
              child: CircleAvatar(
                backgroundImage: message.senderAvatarUrl.isNotEmpty
                    ? NetworkImage(message.senderAvatarUrl)
                    : null, // Load avatar image if URL exists
                child: message.senderAvatarUrl.isEmpty
                    ? Text(currentUser!.displayName != null && currentUser!.displayName!.isNotEmpty ? currentUser!.displayName![0].toUpperCase() : (currentUser!.email != null && currentUser!.email!.isNotEmpty ? currentUser!.email![0].toUpperCase() : '?'), // Fallback text
                    style: TextStyle(color: Colors.white))
                    : null,
                backgroundColor: currentTheme.primaryColor.withOpacity(0.5), // Placeholder background color
              ),
            ),
        ],
      ),
    );
  }

  // Build the content inside the message bubble based on message type
  Widget _buildMessageContent(ChatMessage message, bool isCurrentUser, Color textColor, Color captionColor) {
    // Get theme data based on current mode
    final currentTheme = _currentThemeData();

    switch (message.type) {
      case MessageType.text:
        return Text(
          message.text,
          style: TextStyle(color: textColor), // Use calculated text color
        );
      case MessageType.image:
      // TODO: Display the image from message.mediaUrl using CachedNetworkImage
        if (message.mediaUrl == null || message.mediaUrl!.isEmpty) {
          return Text('Invalid image URL', style: TextStyle(color: captionColor));
        }
        return Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Example: Display an image with a placeholder and error handling
            ClipRRect( // Rounded corners for the image
              borderRadius: BorderRadius.circular(8.0),
              // Use CachedNetworkImage for better performance - uncomment and add package
              // child: CachedNetworkImage(
              //   imageUrl: message.mediaUrl!,
              //   width: 150,
              //   height: 150,
              //   fit: BoxFit.cover,
              //   placeholder: (context, url) => Center(child: CircularProgressIndicator(color: textColor)), // Loading indicator
              //   errorWidget: (context, url, error) => Container( // Error placeholder
              //      width: 150,
              //      height: 150,
              //      color: Colors.grey[200],
              //      child: Icon(Icons.error, color: Colors.red),
              //   ),
              // ),
              child: Image.network( // Using standard Image.network as a placeholder for now
                message.mediaUrl!,
                width: 150,
                height: 150,
                fit: BoxFit.cover,
                loadingBuilder: (context, child, loadingProgress) { // Loading indicator
                  if (loadingProgress == null) return child;
                  return Center(
                    child: CircularProgressIndicator(
                      value: loadingProgress.expectedTotalBytes != null
                          ? loadingProgress.cumulativeBytesLoaded / loadingProgress.expectedTotalBytes!
                          : null,
                      color: textColor, // Loading indicator color based on text color
                    ),
                  );
                },
                errorBuilder: (context, error, stackTrace) => Container( // Error placeholder
                  width: 150,
                  height: 150,
                  color: Colors.grey[200],
                  child: Icon(Icons.error, color: Colors.red),
                ),
              ),
            ),
            if (message.text.isNotEmpty) // Display text caption if available
              Padding(
                padding: const EdgeInsets.only(top: 8.0),
                child: Text(
                  message.text,
                  style: TextStyle(color: captionColor), // Use calculated caption color
                ),
              ),
          ],
        );
      case MessageType.file:
      // TODO: Display a file icon and name, maybe with a download button
        if (message.mediaUrl == null || message.mediaUrl!.isEmpty) {
          return Text('Invalid file URL', style: TextStyle(color: captionColor));
        }
        return Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Example: Display a file icon and name
            Row(
              mainAxisSize: MainAxisSize.min, // Keep row size to minimum
              children: [
                Icon(Icons.insert_drive_file, color: captionColor), // Use calculated caption color for icon
                SizedBox(width: 8.0),
                Expanded( // Use Expanded to prevent text overflow
                  child: Text(
                    message.text.isNotEmpty ? message.text : 'Unknown File',
                    style: TextStyle(color: textColor), // Use calculated text color
                    overflow: TextOverflow.ellipsis,
                  ),
                ),
                // TODO: Add a download button if needed
                // Example download button (requires implementing download logic):
                // IconButton(
                //   icon: Icon(Icons.download, color: captionColor),
                //   onPressed: () {
                //     // TODO: Implement file download logic
                //     print('Downloading file from ${message.mediaUrl}');
                //   },
                // ),
              ],
            ),
            if (message.text.isNotEmpty && message.mediaUrl != null) // Display file name if available
              Padding(
                padding: const EdgeInsets.only(top: 4.0),
                child: Text(
                  message.mediaUrl!.split('/').last, // Display file name from URL (basic example)
                  style: TextStyle(color: captionColor, fontSize: 12.0), // Use calculated caption color
                  overflow: TextOverflow.ellipsis,
                ),
              ),
          ],
        );
      default:
        return Text(
          message.text,
          style: TextStyle(color: textColor), // Use calculated text color
        ); // Default to text
    }
  }


  @override
  Widget build(BuildContext context) {
    // Get the current theme data
    final currentTheme = _currentThemeData();

    // Check if user is logged in, otherwise show a message or navigate back to AuthScreen
    if (currentUser == null) {
      // This case should ideally not be reached if navigation from Splash/Auth is correct
      // but it's a good safety check.
      return Scaffold(
        appBar: AppBar(title: Text('Error')),
        body: Center(child: Text('User not authenticated. Please restart the app.')),
      );
    }


    return Theme( // Wrap with Theme widget to apply the custom theme
      data: currentTheme,
      child: Scaffold(
        appBar: AppBar(
          title: Text('Advanced Chat UI'),
          elevation: Theme.of(context).platform == TargetPlatform.iOS ? 0.0 : 4.0,
          actions: [
            // Theme Toggle Button
            IconButton(
              icon: Icon(
                _currentThemeMode == AppThemeMode.girlish
                    ? Icons.female // Icon for Girlish mode
                    : Icons.male, // Icon for Manly mode
                color: currentTheme.appBarTheme.foregroundColor, // Use app bar foreground color
              ),
              onPressed: _toggleThemeMode,
              tooltip: _currentThemeMode == AppThemeMode.girlish
                  ? 'Switch to Manly Mode'
                  : 'Switch to Girlish Mode',
            ),
            // Logout button
            IconButton(
              icon: Icon(Icons.logout, color: currentTheme.appBarTheme.foregroundColor),
              onPressed: () async {
                // Implement logout logic using Firebase Auth
                try {
                  await FirebaseAuth.instance.signOut();
                  print('Logged out.');
                  // After logout, navigate back to the AuthScreen
                  Navigator.of(context).pushReplacement(
                    MaterialPageRoute(builder: (context) => AuthScreen()),
                  );
                } catch (e) {
                  print('Error logging out: $e');
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(content: Text('Error logging out.')),
                  );
                }
              },
              tooltip: 'Logout',
            ),
          ],
        ),
        body: Container(
          // Add background image (can be themed too if you have different images)
          decoration: BoxDecoration(
            image: DecorationImage(
              // Replace with your anime image URL
              // You could use a different image based on _currentThemeMode
              image: NetworkImage('https://placehold.co/600x800/E0BBE4/FFFFFF?text=Cute+Anime+BG'), // Placeholder anime image
              fit: BoxFit.cover, // Cover the entire background
            ),
          ),
          child: Column(
            children: <Widget>[
              // Team/Participants Section (Placeholder)
              Container(
                padding: EdgeInsets.symmetric(vertical: 12.0, horizontal: 16.0),
                color: currentTheme.appBarTheme.backgroundColor?.withOpacity(0.7), // Use themed app bar color with opacity
                child: Row(
                  children: [
                    Icon(Icons.group, color: currentTheme.appBarTheme.foregroundColor?.withOpacity(0.8)), // Themed icon color
                    SizedBox(width: 8.0),
                    Text(
                      'Team Members: Alice, Bob, Charlie', // Placeholder team members
                      style: TextStyle(color: currentTheme.appBarTheme.foregroundColor, fontSize: 16.0), // Themed text color
                    ),
                    // TODO: Add avatars or a list of participants here, potentially fetching from Firestore
                  ],
                ),
              ),
              // Expanded makes the ListView take up the remaining space
              Flexible(
                child: ListView.builder(
                  // Reverse the list to show the latest messages at the bottom
                  reverse: true,
                  padding: EdgeInsets.all(8.0),
                  itemCount: _messages.length,
                  itemBuilder: (_, int index) => _buildMessage(_messages[index]), // Use _buildMessage to display each message
                ),
              ),
              // Container for the input area
              Container(
                decoration: BoxDecoration(
                  color: Colors.transparent, // Make background transparent to show the image
                ),
                child: _buildTextComposer(), // Build the text input and action buttons
              ),
              // Emoji Picker (conditionally displayed)
              if (_showEmojiPicker)
              // TODO: Integrate a real emoji picker package like 'emoji_picker_flutter'
                Container(
                  height: 250, // Adjust height as needed
                  color: currentTheme.scaffoldBackgroundColor, // Use theme background color
                  child: Center(child: Text('Emoji Picker Placeholder')), // Placeholder
                  // Example using emoji_picker_flutter:
                  // EmojiPicker(
                  //   onEmojiSelected: (category, emoji) {
                  //     _textController.text += emoji.emoji;
                  //   },
                  //   config: Config(
                  //     columns: 7,
                  //     emojiSizeMax: 32.0,
                  //     verticalSpacing: 0,
                  //     horizontalSpacing: 0,
                  //     initCategory: Category.RECENT,
                  //     bgColor: currentTheme.scaffoldBackgroundColor,
                  //     indicatorColor: currentTheme.primaryColor,
                  //     iconColor: currentTheme.iconTheme.color,
                  //     iconColorSelected: currentTheme.primaryColor,
                  //     progressIndicatorColor: currentTheme.primaryColor,
                  //     backspaceColor: currentTheme.primaryColor,
                  //     showBackspaceButton: true,
                  //     showCategories: true,
                  //     showSearchBar: true,
                  //     emojiContainerHeight: 250.0,
                  //     buttonMode: ButtonMode.MATERIAL,
                  //   ),
                  // ),
                ),
            ],
          ),
        ),
      ),
    );
  }

  @override
  void dispose() {
    // Clean up the controller when the widget is disposed
    _textController.dispose();
    // Cancel the Firestore stream subscription to prevent memory leaks
    _messageSubscription?.cancel();
    super.dispose();
  }
}
